@page "{id:int?}"
@model NERA_Presentation.Pages.CreateEventModel
@{
    ViewData["Title"] = "NERA - EVENT CREATER";
}
@{
    // Decide what the <sl-select> should show.
    var loc = Model.Event?.Location;
    var isKnown = loc == "Amsterdam" || loc == "Eindhoven" || loc == "Online";
    var selectValue = string.IsNullOrEmpty(loc) ? "" : (isKnown ? loc : "other");
}

<div class="create-page">
    <main class="container">
        <h1 class="page-title">Create Event</h1>
        <sl-card class="panel form-card form-shell large-centered-form larger-bg">
            <div class="accent-bar"></div>
            <form id="eventForm" class="form-grid" method="post" novalidate>
                <!-- Hidden binding inputs (these are what asp.net model binder reads) -->
                <input asp-for="Event.Id" type="hidden" id="hiddenId" />
                <input asp-for="Event.Title" type="hidden" id="hiddenTitle" />
                <input asp-for="Event.Description" type="hidden" id="hiddenDescription" />
                <input asp-for="Event.StartDate" type="hidden" id="hiddenStartDate" />
                <input asp-for="Event.EndDate" type="hidden" id="hiddenEndDate" />
                <input asp-for="Event.Location" type="hidden" id="hiddenLocation" />
                <input asp-for="Event.Cost" type="hidden" id="hiddenCost" />
                <input asp-for="Event.Capacity" type="hidden" id="hiddenCapacity" />
                <input asp-for="Event.Status" type="hidden" id="hiddenStatus" value="0" />


                <!-- shoelace controls (visual UI) - keep value attributes to prefill UI -->
                <sl-input id="title" name="Event.Title" label="Event Title" placeholder="Enter the title" required class="full" value="@Model.Event.Title"></sl-input>

                <sl-textarea id="description" name="Event.Description" label="Description" rows="5" required class="full" value="@Model.Event.Description"></sl-textarea>

                <div class="form-row">
                    <sl-input id="date" name="Event.Date" label="Date" type="date" required class="half" value="@(Model.Event.StartDate == default ? "" : Model.Event.StartDate.ToString("yyyy-MM-dd"))"></sl-input>
                    <sl-select id="locationRef" name="Event.Location" label="Location (list)" placeholder="Select a venue" hoist class="half" value="@selectValue">
                        <sl-option value="">— Select —</sl-option>
                        <sl-option value="Amsterdam">Amsterdam</sl-option>
                        <sl-option value="Eindhoven">Eindhoven</sl-option>
                        <sl-option value="Online">Online</sl-option>
                        <sl-option value="other">Other…</sl-option>
                    </sl-select>
                </div>

                <div class="form-row">
                    <sl-input id="startTime" name="Event.StartTime" label="Start Time" type="time" required class="half" value="@(Model.Event.StartDate == default ? "" : Model.Event.StartDate.ToString("HH:mm"))"></sl-input>
                    <sl-input id="endTime" name="Event.EndTime" label="End Time" type="time" required class="half" value="@(Model.Event.EndDate == default ? "" : Model.Event.EndDate.ToString("HH:mm"))"></sl-input>
                </div>

                <sl-input id="locationText" label="Location (text)" placeholder="e.g. Convention Center" class="full" style="display:@(string.IsNullOrEmpty(Model.Event.Location) || Model.Event.Location == "Amsterdam" || Model.Event.Location == "Eindhoven" || Model.Event.Location == "Online" ? "none" : "");" value="@(Model.Event.Location)"></sl-input>

                <div class="form-row">
                    <sl-input id="capacity" label="Max Registrations (Capacity)" type="number" min="0" value="@(Model.Event.Capacity == 0 ? "" : Model.Event.Capacity.ToString())" class="half"></sl-input>
                    <sl-input id="cost" label="Cost (€)" type="number" min="0" step="0.01" value="@(Model.Event.Cost == 0 ? "" : Model.Event.Cost.ToString("F2"))" class="half"></sl-input>
                </div>

                <div class="form-actions full">
                    <sl-button id="clearBtn" type="button" class="btn-ghost" style="margin-right:8px">
                        <sl-icon slot="prefix" name="trash"></sl-icon>
                        Clear
                    </sl-button>
                    <sl-button type="submit" class="btn-gradient">Save</sl-button>
                    <a asp-page="Index" style="text-decoration:none"><sl-button class="btn-outline">Cancel</sl-button></a>
                </div>
            </form>
        </sl-card>
    </main>

    <script>
        // visual controls
        const locationRef = document.getElementById('locationRef');
        const locationText = document.getElementById('locationText');
        const title = document.getElementById('title');
        const description = document.getElementById('description');
        const date = document.getElementById('date');
        const startTime = document.getElementById('startTime');
        const endTime = document.getElementById('endTime');
        const capacity = document.getElementById('capacity');
        const cost = document.getElementById('cost');

        // Elements
        const form = document.getElementById('eventForm');

        // hidden inputs for model binding
        const hiddenId = document.getElementById('hiddenId');
        const hiddenTitle = document.getElementById('hiddenTitle');
        const hiddenDescription = document.getElementById('hiddenDescription');
        const hiddenStartDate = document.getElementById('hiddenStartDate');
        const hiddenEndDate = document.getElementById('hiddenEndDate');
        const hiddenLocation = document.getElementById('hiddenLocation');
        const hiddenCost = document.getElementById('hiddenCost');
        const hiddenCapacity = document.getElementById('hiddenCapacity');
        const hiddenStatus = document.getElementById('hiddenStatus');

        // Toggle free-text location when selecting "Other…"
        function toggleLocationText(){
          const useText = locationRef.value === 'other';
          locationText.style.display = useText ? '' : 'none';
          locationText.toggleAttribute('required', useText);
          if(useText) locationText.focus();
        }
        locationRef.addEventListener('sl-change', toggleLocationText);

        // Build ISO datetimes for hidden fields from date + time controls
        function buildIso(dateVal, timeVal) {
            if (!dateVal) return '';
            if (!timeVal) return dateVal; // date only
            // ensure both parts present and return combined local datetime
            return `${dateVal}T${timeVal}`;
        }

        // copy values from visual controls into hidden inputs before submit
        function syncToHidden(){
            hiddenTitle.value = title.value || '';
            hiddenDescription.value = description.value || '';
            // Build ISO datetimes from separate date/time controls
            if (date.value && startTime.value) {
                const start = new Date(`${date.value}T${startTime.value}`);
                hiddenStartDate.value = start.toISOString();
            } else {
                hiddenStartDate.value = '';
            }
            if (date.value && endTime.value) {
                const end = new Date(`${date.value}T${endTime.value}`);
                hiddenEndDate.value = end.toISOString();
            } else {
                hiddenEndDate.value = '';
            }
            hiddenLocation.value = (locationRef.value === 'other' ? locationText.value : locationRef.value) || '';
            hiddenCost.value = cost.value || '';
            hiddenCapacity.value = capacity.value || '';
            // Default new events to Open (enum 0)
            if (!hiddenStatus.value) hiddenStatus.value = '0';
        }

        // Submit handler: sync hidden fields and allow normal post to PageModel
        form.addEventListener('submit', (e) => {
          syncToHidden();
          // let the browser submit the form to OnPostAsync
        });

        // Clear button handler to reset Shoelace fields
        document.getElementById('clearBtn').addEventListener('click', () => {
          form.reset();
          document.querySelectorAll('sl-input, sl-textarea, sl-select').forEach(el => {
            el.value = '';
          });
          toggleLocationText();
          document.getElementById('title').focus();
        });
    </script>

    <style>
    /* Center the form and increase its size */
    .large-centered-form {
        max-width: 600px !important;
        min-width: 350px;
        margin: 48px auto !important;
        padding: 40px 36px !important;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .form-grid sl-input,
    .form-grid sl-textarea,
    .form-grid sl-select {
        font-size: 1.15rem;
    }
    .form-row {
        display: flex;
        gap: 24px;
        margin-bottom: 0;
    }
    .form-row .half {
        flex: 1 1 0;
    }
    .form-grid .full {
        grid-column: 1 / -1;
    }
    .form-actions {
        justify-content: center;
    }
    .larger-bg {
        max-width: 900px !important;
        min-width: 400px;
        min-height: 520px;
        margin: 48px auto !important;
        padding: 56px 48px !important;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    </style>
</div>


